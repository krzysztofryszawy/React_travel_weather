{"version":3,"sources":["components/Tutorial/Tutorial.module.css","components/UI/Backdrop/Backdrop.module.css","components/CumulativeForecast/SingleCityForecast/SingleCityForecast.module.css","App.module.css","containers/MainContainer/MainContainer.module.css","components/UI/Spinner/Spinner.module.css","components/HeaderInfo/HeaderInfo.module.css","assets/images/tutorial_1.png","assets/images/tutorial_2.png","components/CumulativeForecast/CumulativeForecast.module.css","components/CumulativeForecast/SingleCityForecast/SingleCityForecast.js","components/Tutorial/Tutorial.js","components/UI/Spinner/Spinner.js","components/UI/Backdrop/Backdrop.js","components/CumulativeForecast/CumulativeForecast.js","containers/MainContainer/MainContainer.js","components/HeaderInfo/HeaderInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","step1","step2","Backdrop","background","inputBox","SingleCityForecast","singleCityCountry","singleDate","singleTemperature","singleConditionID","colored","App","MainContainer","Loader","load1","HeaderInfo","__webpack_require__","p","CumulativeForecast","confirmCityButton","inputContent","clearButton","singleCityForecast","props","translatedConditionID","conditionID","react_default","a","createElement","className","color","styles","join","onClick","getActualClickedDataHandler","dt","singleCityName","databaseName","dayOfWeek","dt_txt","substr","Math","ceil","temperature","tutorial","require","closeTutorial","spinner","dialogBox","style","display","show","click","children","cumulativeForecast","state","loading","backdrop","cityName","listOfDatabaseNames","indexCities","watchedTutorial","saveStateToLocalstorage","stateToLocalstorage","_this","localStorage","setItem","JSON","stringify","loadStateFromLocalstorage","retrievedObject1","getItem","result1","parse","setState","setStateFromLocalstorage","map","singleElement","getInitialCityDatabase","then","convertDataToDay","timestamp","Date","getDay","clickedData","clickedDatabaseName","clickedCityData","clickedCityName","toLowerCase","showBackdrop","hideBackdrop","changeInputState","e","tempCityName","target","value","acceptInputState","clearedDatabaseNames","filter","el","startDate","getSingleCityDatabase","resetLocalstorage","clear","closeTutorialHandler","_this2","this","console","log","cityName_param","_this3","weatherURL","concat","uniqueCityName_param","Promise","resolve","reject","axios","get","response","_this3$setState","cityToAdd","endDate","undefined","round","now","push","element","Object","defineProperty","data","catch","error","databaseNameFromDatabase","_this4","_this4$setState","_this5","name","type","onChange","Spinner","every","Tutorial","commonDatabase","singleCityElement","singleCityDatabase","list","singleObject","mapIndex","key","city","main","temp","temperature_max","temp_max","temperature_min","temp_min","weather","id","country","Component","mainContainer","headerInfo","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,UAAA,4BAAAC,MAAA,wBAAAC,MAAA,6CCAlBJ,EAAAC,QAAA,CAAkBI,SAAA,2BAAAC,WAAA,6BAAAC,SAAA,+CCAlBP,EAAAC,QAAA,CAAkBO,mBAAA,+CAAAC,kBAAA,8CAAAC,WAAA,uCAAAC,kBAAA,8CAAAC,kBAAA,8CAAAC,QAAA,yDCAlBb,EAAAC,QAAA,CAAkBa,IAAA,sCCAlBd,EAAAC,QAAA,CAAkBc,cAAA,0DCAlBf,EAAAC,QAAA,CAAkBe,OAAA,wBAAAC,MAAA,4CCAlBjB,EAAAC,QAAA,CAAkBiB,WAAA,6GCDlBlB,EAAAC,QAAiBkB,EAAAC,EAAuB,2DCAxCpB,EAAAC,QAAiBkB,EAAAC,EAAuB,0DCCxCpB,EAAAC,QAAA,CAAkBoB,mBAAA,+CAAAC,kBAAA,8CAAAC,aAAA,yCAAAC,YAAA,0OCgCHC,EA3Ba,SAACC,GAIzB,IAAIC,EAAsB,KAS1B,OARID,EAAME,aAAe,MAAKD,EAAwB,oCAClDD,EAAME,aAAe,MAAKD,EAAwB,wBAClDD,EAAME,aAAe,MAAKD,EAAwB,qBAClDD,EAAME,aAAe,MAAKD,EAAwB,qBAClDD,EAAME,aAAe,MAAKD,EAAwB,2BAC7B,KAArBD,EAAME,cAAoBD,EAAwB,gBAClDD,EAAME,YAAc,MAAKD,EAAwB,iBAGnDE,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAMO,MACVC,IAAM,mBACN,CAACA,IAAM,mBAAwBA,IAAM,SAAaC,KAAK,KAC7DC,QAAS,kBAAMV,EAAMW,4BAA4BX,EAAMY,GAAIZ,EAAMa,eAAgBb,EAAMc,gBACzFX,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,mBAAwBR,EAAMjB,kBAApD,KAAyEiB,EAAMa,gBAC/EV,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,YAAtB,eAAyCR,EAAMe,UAA/C,gBAA6Df,EAAMgB,OAAOC,OAAO,EAAG,KACpFd,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,mBAAtB,oBAAqDU,KAAKC,KAAKnB,EAAMoB,aAArE,SACAjB,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,mBAAwBP,sBCUzCoB,GAhCIC,EAAQ,IACRA,EAAQ,IAGV,SAACtB,GAEd,OACIG,EAAAC,EAAAC,cAAA,OAAKK,QAAS,kBAAMV,EAAMuB,iBAAiBjB,UAAWE,IAAM,WACxDL,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAA,oCAA2BF,EAAAC,EAAAC,cAAA,sBAA3B,uKACAF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,QAGtBL,EAAAC,EAAAC,cAAA,2LACAF,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,QAGtBL,EAAAC,EAAAC,cAAA,8NACAF,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAAA,kRACAF,EAAAC,EAAAC,cAAA,sFACAF,EAAAC,EAAAC,cAAA,wDChBGmB,EATC,kBACRrB,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,wBACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,4BCWnBiB,EAhBG,SAACzB,GAEf,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,SAAckB,MAAO,CAACC,QAAS3B,EAAM4B,KAAO,UAAY,SAC1EzB,EAAAC,EAAAC,cAAA,OAAMC,UAAWE,IAAM,WAAgBE,QAASV,EAAM6B,QACtD1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,UACjBR,EAAM8B,6BCsPRC,6MArOXC,MAAQ,CACJC,SAAQ,EACRC,UAAU,EACVC,SAAU,SACVC,oBAAqB,GACrBC,YAAa,EACblD,SAAS,EACTmD,iBAAiB,KAKrBC,wBAA0B,WACtB,IAAMC,EAAsB,CAACJ,oBAAqBK,EAAKT,MAAMI,oBAAqBC,YAAaI,EAAKT,MAAMK,YAAaC,gBAAiBG,EAAKT,MAAMM,iBACnJI,aAAaC,QAAQ,qBAAsBC,KAAKC,UAAUL,OAI9DM,0BAA4B,WACxB,IAAMC,EAAmBL,aAAaM,QAAQ,sBAC1CC,EAAWL,KAAKM,MAAMH,GAC1BN,EAAKU,SAAS,CAACf,oBAAqBa,EAAQb,oBAAqBE,gBAAiBW,EAAQX,iBAAiB,kBAAMG,EAAKW,gCAG1HA,yBAA2B,WACnBX,EAAKT,MAAMI,oBAAoBiB,IAAI,SAAAC,GAC/Bb,EAAKc,uBAAuBD,EAAcnB,SAAUmB,EAAcxC,cAAc0C,KAAK,kBAAMf,EAAKU,SAAS,CAAClB,SAAQ,WAsE9HwB,iBAAmB,SAACC,GAIhB,MAFW,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YADhE,IAAIC,KAAe,IAAVD,GAEME,aAM3BjD,4BAA8B,SAACkD,EAAahD,EAAgBiD,GACxDrB,EAAKU,SAAS,CAACY,gBAAiBF,EAAaG,gBAAiBnD,EAAeoD,cAAeH,oBAAqBA,IAGjHrB,EAAKyB,kBAGTC,aAAe,WACX1B,EAAKU,SAAS,CAACjB,UAAU,OAG7BgC,aAAe,WACXzB,EAAKU,SAAS,CAACjB,UAAU,OAG7BkC,iBAAmB,SAACC,GACZ5B,EAAKU,SAAS,CAACmB,aAAcD,EAAEE,OAAOC,WAG9CC,iBAAmB,WAEf,IAAMC,EAAuBjC,EAAKT,MAAMI,oBAAoBuC,OAAO,SAACC,GAC5D,GAAIA,EAAGC,UAAYpC,EAAKT,MAAM+B,gBAC1B,OAAOa,EAAGC,UAAYpC,EAAKT,MAAM+B,kBAE7CtB,EAAKU,SAAS,CAACf,oBAAqBsC,IAE5BjC,EAAKU,SAAS,CAAChB,SAAUM,EAAKT,MAAMsC,aAAcpC,UAAU,GAAQ,kBAAMO,EAAKqC,sBAAsBrC,EAAKT,MAAMG,UACjGqB,KAAK,WACAf,EAAKF,0BACLE,EAAKU,SAAS,CAAClB,SAAQ,WAKvD8C,kBAAoB,WAChBrC,aAAasC,MAAM,yBAGvBC,qBAAuB,WACnBxC,EAAKU,SAAS,CAACb,iBAAiB,wFA/JhB,IAAA4C,EAAAC,KAEZzC,aAAaM,QAAQ,uBACrBmC,KAAKrC,4BACLsC,QAAQC,IAAI,mCAEZF,KAAKL,sBAAsBK,KAAKnD,MAAMG,UACjCqB,KAAK,kBAAM0B,EAAK/B,SAAS,CAAClB,SAAQ,kGA2CzBqD,GAAgB,IAAAC,EAAAJ,KAClCA,KAAKhC,SAAS,CAAClB,SAAS,IAEhC,IAAIuD,EAAU,sDAAAC,OAAyDH,EAAzD,wDAEFI,EAAoB,GAAAD,OAAMH,GAANG,OAAuBN,KAAKnD,MAAMK,aAC1D,OAAO,IAAIsD,QAAQ,SAACC,EAASC,GACzBC,IAAMC,IAAIP,GACLhC,KAAK,SAAAwC,GAAY,IAAAC,EAGVC,EAAa,CACb/D,SAAUmD,EACVxE,aAAc4E,EAAqB,WACnCb,UAAWU,EAAKvD,MAAM+B,gBACtBoC,QAAS,MACThH,QAASoG,EAAKvD,MAAM7C,cACGiH,GAAvBF,EAAUrB,YAAyBqB,EAAUrB,UAAW3D,KAAKmF,MAAM1C,KAAK2C,MAAM,MAClFf,EAAKvD,MAAMI,oBAAoBmE,KAAKL,GAIpCX,EAAKvD,MAAMI,oBAAoBiB,IAAI,SAAAmD,GAI/B,OAHAA,EAAQ1F,cAAgByE,EAAKvD,MAAM8B,sBAC/B0C,EAAQL,QAAUZ,EAAKvD,MAAM+B,iBAE1ByC,IAIXjB,EAAKpC,UAAL8C,EAAA,GAAAQ,OAAAC,EAAA,EAAAD,CAAAR,EAAgBP,EAAqB,WAAaM,EAASW,MAA3DF,OAAAC,EAAA,EAAAD,CAAAR,EAAA,cAA8EV,EAAKvD,MAAMK,YAAc,GAAvGoE,OAAAC,EAAA,EAAAD,CAAAR,EAAA,WAAoHV,EAAKvD,MAAM7C,SAA/H8G,GAAyI,kBAAML,QAElJgB,MAAM,SAAAC,GACHhB,EAAOgB,GACPzB,QAAQC,IAAIwB,sDAMLvB,EAAgBwB,GAA0B,IAAAC,EAAA5B,KAC7DA,KAAKhC,SAAS,CAAClB,SAAS,IAEhC,IAAIuD,EAAU,sDAAAC,OAAyDH,EAAzD,wDAEN,OAAO,IAAIK,QAAQ,SAACC,EAASC,GACzBC,IAAMC,IAAIP,GACLhC,KAAK,SAAAwC,GAAY,IAAAgB,EACdD,EAAK5D,UAAL6D,EAAA,GAAAP,OAAAC,EAAA,EAAAD,CAAAO,EAAgBF,EAA2Bd,EAASW,MAApDF,OAAAC,EAAA,EAAAD,CAAAO,EAAA,cAAuED,EAAK/E,MAAMK,YAAc,GAAhGoE,OAAAC,EAAA,EAAAD,CAAAO,EAAA,WAA6GD,EAAK/E,MAAM7C,SAAxH6H,GAAkI,kBAAMpB,QAE3IgB,MAAM,SAAAC,GACHhB,EAAOgB,GACPzB,QAAQC,IAAIwB,wCA4Dd,IAAAI,EAAA9B,KAEFtF,EAAeM,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,cACjBL,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAO6G,KAAK,gBAAgBC,KAAK,OAAOC,SAAUjC,KAAKf,mBACvDjE,EAAAC,EAAAC,cAAA,UAAQC,UAAWE,IAAM,kBAAuBE,QAASyE,KAAKV,kBAA9D,2BAGxB,GAAIU,KAAKnD,MAAMC,QAAS,OAAO9B,EAAAC,EAAAC,cAACgH,EAAD,MAgB/B,IATalC,KAAKnD,MAAMI,oBAAoBiB,IAAI,SAAAuB,GAC3C,OAAOA,EAAG9D,eAEMuC,IAAI,SAAAuB,GACZ,GAAIqC,EAAKjF,MAAM4C,GAAK,OAAOA,IAElB0C,MAAM,SAAA1C,GACf,OAAOA,IAEN,OAAOzE,EAAAC,EAAAC,cAACgH,EAAD,MAErB,IAAMhG,EAAWlB,EAAAC,EAAAC,cAACkH,EAAD,CACGhG,cAAe4D,KAAKF,uBAGpCuC,EAAiBrC,KAAKnD,MAAMI,oBAAoBiB,IAAI,SAAAoE,GAChD,IAAIC,EAAsBT,EAAKjF,MAAMyF,EAAkB3G,cAKvD,OAHmC4G,EAAmBC,KAAKhD,OAAO,SAACC,GAC/D,OAAOA,EAAGhE,IAAM6G,EAAkB5C,WAAaD,EAAGhE,GAAK6G,EAAkBtB,UAG9C9C,IAAI,SAACuE,EAAcC,GAC1B,OACI1H,EAAAC,EAAAC,cAACvB,EAAD,CACMgJ,IAAKF,EAAahH,GAAG8G,EAAmBK,KAAKb,KAC7CpG,aAAc2G,EAAkB3G,aAChCF,GAAIgH,EAAahH,GACjBI,OAAQ4G,EAAa5G,OACrBD,UAAWkG,EAAKxD,iBAAiBmE,EAAahH,IAC9CQ,YAAawG,EAAaI,KAAKC,KAC/BC,gBAAiBN,EAAaI,KAAKG,SACnCC,gBAAiBR,EAAaI,KAAKK,SACnCnI,YAAa0H,EAAaU,QAAQ,GAAGC,GACrC1H,eAAgB6G,EAAmBK,KAAKb,KACxCnI,kBAAmB2I,EAAmBK,KAAKS,QAC3C7H,4BAA6BsG,EAAKtG,4BAClCJ,OAAQkH,EAAkBtI,cAUpE,OACKgB,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,oBACnBL,EAAAC,EAAAC,cAAC1B,EAAD,CACIiD,KAAMuD,KAAKnD,MAAME,SACjBL,MAAOsD,KAAKhB,aACZC,iBAAkBe,KAAKf,kBACtBvE,GAEJsF,KAAKnD,MAAMM,gBACNkF,EACAnG,EACLqB,aAAaM,QAAQ,sBAChB7C,EAAAC,EAAAC,cAAA,UAAQC,UAAWE,IAAM,YAAiBE,QAASyE,KAAKJ,mBAAxD,oCACA,aA/OO0D,aCOlBC,EAXQ,WAGnB,OACEvI,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,eAClBL,EAAAC,EAAAC,cAACV,EAAD,yBCcKgJ,EArBI,SAAC3I,GAGhB,OAEAG,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,YACnBL,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACkH,SAAU,UAAvB,0BAAmDzI,EAAAC,EAAAC,cAAA,QAAMqB,MAAO,CAACkH,SAAU,SAAxB,gBAAnD,KACAzI,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACkH,SAAU,SAAvB,8DCWQxJ,6MAdX4C,MAAQ,yEAIDhC,GACH,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAWE,IAAM,KACpBL,EAAAC,EAAAC,cAACb,EAAD,MACAW,EAAAC,EAAAC,cAAChB,EAAD,cAXMoJ,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhJ,EAAAC,EAAAC,cAAC+I,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjG,KAAK,SAAAkG,GACjCA,EAAaC","file":"static/js/main.d49827bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tutorial_container__3X3KM\",\"step1\":\"Tutorial_step1__1MgeC\",\"step2\":\"Tutorial_step2__19oZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__qLdDx\",\"background\":\"Backdrop_background__2mI3h\",\"inputBox\":\"Backdrop_inputBox__Zy_1G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SingleCityForecast\":\"SingleCityForecast_SingleCityForecast__Ib_kZ\",\"singleCityCountry\":\"SingleCityForecast_singleCityCountry__3QZwc\",\"singleDate\":\"SingleCityForecast_singleDate__i32xu\",\"singleTemperature\":\"SingleCityForecast_singleTemperature__1uLWc\",\"singleConditionID\":\"SingleCityForecast_singleConditionID__3HnZG\",\"colored\":\"SingleCityForecast_colored__1GSYU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1iSIK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainContainer\":\"MainContainer_MainContainer__1-exa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__3Ena4\",\"load1\":\"Spinner_load1__2ArVX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeaderInfo\":\"HeaderInfo_HeaderInfo__3xWq6\"};","module.exports = __webpack_public_path__ + \"static/media/tutorial_1.57ce3984.png\";","module.exports = __webpack_public_path__ + \"static/media/tutorial_2.98219f71.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CumulativeForecast\":\"CumulativeForecast_CumulativeForecast__29mU0\",\"confirmCityButton\":\"CumulativeForecast_confirmCityButton__1BLoh\",\"inputContent\":\"CumulativeForecast_inputContent__3uK-d\",\"clearButton\":\"CumulativeForecast_clearButton__w9jib\"};","import React from 'react';\r\nimport styles from './SingleCityForecast.module.css';\r\n\r\n\r\n\r\n\r\n const singleCityForecast = (props) => {\r\n\r\n     \r\n//condition passed by API => translation on PL\r\n    let translatedConditionID=null\r\n    if (props.conditionID >= 200) translatedConditionID = '🌩 ⛈ Thunderstorm'\r\n    if (props.conditionID >= 300) translatedConditionID = '🌦 Drizzle'\r\n    if (props.conditionID >= 500) translatedConditionID = '🌧 Rain'\r\n    if (props.conditionID >= 600) translatedConditionID = '🌨 Snow'\r\n    if (props.conditionID >= 700) translatedConditionID = '🌫 Atmosphere'\r\n    if (props.conditionID == 800) translatedConditionID = '☀ Clear'\r\n    if (props.conditionID > 800) translatedConditionID = '☁ Clouds'\r\n     \r\n    return (\r\n      <div className={props.color\r\n                ? styles['SingleCityForecast'] \r\n                : [styles['SingleCityForecast'], styles['colored']].join(' ')}\r\n            onClick={() => props.getActualClickedDataHandler(props.dt, props.singleCityName, props.databaseName)}>\r\n          <div className={styles['singleCityCountry']}>{props.singleCityCountry}: {props.singleCityName}</div>\r\n          <div className={styles['singleDate']}>📆{props.dayOfWeek} 🕙{props.dt_txt.substr(5, 11)}</div>\r\n          <div className={styles['singleTemperature']}>🌡temp {Math.ceil(props.temperature)}°C</div>\r\n          <div className={styles['singleConditionID']}>{translatedConditionID}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default singleCityForecast;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport styles from './Tutorial.module.css'\r\n\r\n\r\n\r\nconst tutorial_1 = require('../../assets/images/tutorial_1.png')\r\nconst tutorial_2 = require('../../assets/images/tutorial_2.png')\r\n\r\n\r\nconst tutorial = (props) => {\r\n    \r\n    return(\r\n        <div onClick={() => props.closeTutorial()} className={styles['container']}>\r\n            <h2>PLEASE READ THIS SHORT TUTORIAL 👇</h2>\r\n            <h4>When preparing to trip <span>✈</span>, find on main list desirable date and time when you will arrive to destination city. Then click ✔ on it, and TravelWeatherApp will ask you for the City name.</h4>\r\n            <p>Dialog box as below ⬇ will apear.</p>\r\n            <div className={styles['step1']}>\r\n    \r\n            </div>\r\n            <h4>This date will be stored as date of your arrival to choosen city, and until then you will see forecast ⛅ ☂ ☃ 🌞 🌪 for this choosen city. </h4>\r\n            <p>You can easy see it on list ⬇ below.</p>\r\n            <div className={styles['step2']}>\r\n            \r\n            </div>\r\n            <h4>Now is the time 🎈 , when you can set the next destinations 🏰🗼🗽 of your trip!. It is just easy as before: choose date and time, click to set arrival time and voilla!</h4>\r\n            <h2>👇 MOST IMPORTANT 👇</h2>\r\n            <h3>Now TravelWeatherApp will remember, when you want arrive to all your trip destinations 🥂. When you will open App again, TravelWeatherApp will show you newest forecast 🌡 for those destinations. Always accurate, always current. 🌞</h3>\r\n            <h3>Enjoy you trip! 🤞 Don't Let the Weather Take You by Surprise!</h3>\r\n            <p>(click to close ❌)</p>\r\n        </div>\r\n    \r\n    \r\n    )\r\n    \r\n    \r\n}\r\n\r\nexport default tutorial","import React from 'react'\r\nimport styles from './Spinner.module.css'\r\n\r\nconst spinner = () => (\r\n        <div>\r\n           <h2> BE PATIENT </h2>\r\n           <h1> ⛅ ☂ 🌞 </h1>\r\n           <h2>LOADING...</h2>\r\n            <div className={styles['Loader']}></div>\r\n        </div>\r\n)\r\n\r\nexport default spinner;","import React from 'react'\r\nimport styles from './Backdrop.module.css'\r\n\r\nconst dialogBox = (props) => {\r\n    \r\n    return(\r\n        <div className={styles['Backdrop']} style={{display: props.show ? 'inherit' : 'none'}} >\r\n            <div  className={styles['background']} onClick={props.click}></div>\r\n            <div className={styles['inputBox']}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    \r\n    \r\n    )\r\n    \r\n    \r\n}\r\n\r\nexport default dialogBox ","import React, { Component } from 'react'\r\nimport styles from './CumulativeForecast.module.css'\r\nimport SingleCityForecast from './SingleCityForecast/SingleCityForecast'\r\nimport Tutorial from '../Tutorial/Tutorial'\r\nimport Spinner from '../UI/Spinner/Spinner'\r\nimport Backdrop from '../UI/Backdrop/Backdrop'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\nclass cumulativeForecast extends Component {\r\n    \r\n    componentDidMount() {\r\n// conditional check if there are previous data or should start with new database\r\n        if (localStorage.getItem('StateInsideStorage')) {\r\n            this.loadStateFromLocalstorage()\r\n            console.log('available data in LocalStorage')} \r\n        else {\r\n            this.getSingleCityDatabase(this.state.cityName)\r\n                .then(() => this.setState({loading:false}))\r\n            }\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n    }\r\n\r\n    state = {\r\n        loading:true,\r\n        backdrop: false,\r\n        cityName: 'krakow',\r\n        listOfDatabaseNames: [],\r\n        indexCities: 0,\r\n        colored: false,\r\n        watchedTutorial: false,\r\n    }\r\n\r\n\r\n//saving data to localstorage\r\n    saveStateToLocalstorage = () => {\r\n        const stateToLocalstorage = {listOfDatabaseNames: this.state.listOfDatabaseNames, indexCities: this.state.indexCities, watchedTutorial: this.state.watchedTutorial}\r\n        localStorage.setItem('StateInsideStorage', JSON.stringify(stateToLocalstorage));\r\n    }\r\n\r\n//loading state from localstorage\r\n    loadStateFromLocalstorage = () => {\r\n        const retrievedObject1 = localStorage.getItem('StateInsideStorage');\r\n        let result1 = (JSON.parse(retrievedObject1)); \r\n        this.setState({listOfDatabaseNames: result1.listOfDatabaseNames, watchedTutorial: result1.watchedTutorial},() => this.setStateFromLocalstorage())        \r\n    }\r\n        \r\n    setStateFromLocalstorage = () => {\r\n            this.state.listOfDatabaseNames.map(singleElement => { \r\n                this.getInitialCityDatabase(singleElement.cityName, singleElement.databaseName).then(() => this.setState({loading:false}))\r\n                \r\n            }\r\n        )\r\n     \r\n    }\r\n\r\n        \r\n    \r\n//loads one single city passed by param\r\n    getSingleCityDatabase(cityName_param) {\r\n        this.setState({loading: true})\r\n        // let weatherURL = `local_database_${cityName_param}.json`\r\nlet weatherURL = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName_param}&units=metric&APPID=c13044a1ca13fe20adb4a879f7eeed40`\r\n        //setting unique name for each city\r\n        let uniqueCityName_param = `${cityName_param}${this.state.indexCities}`\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(weatherURL)\r\n                .then(response => {\r\n                \r\n        //creating list of choosen cities - saving database name for them, pushing to database one by one\r\n                    let cityToAdd  = {\r\n                        cityName: cityName_param,\r\n                        databaseName: uniqueCityName_param+'Database',\r\n                        startDate: this.state.clickedCityData, \r\n                        endDate: 1920000000,\r\n                        colored: this.state.colored}\r\n                    if (cityToAdd.startDate == undefined) {cityToAdd.startDate= Math.round(Date.now()/1000)}\r\n                    this.state.listOfDatabaseNames.push(cityToAdd)\r\n//// !!!!!! above needs to be rebilded to setState properly!!!!!!\r\n\r\n        //setting end date for clicked city, maping through database setted above \r\n                    this.state.listOfDatabaseNames.map(element => {\r\n                    if (element.databaseName == this.state.clickedDatabaseName) {\r\n                            element.endDate = this.state.clickedCityData\r\n                        }\r\n                        return element\r\n                    })\r\n\r\n                \r\n                    this.setState({[uniqueCityName_param+'Database']: response.data, indexCities: this.state.indexCities + 1, colored: !this.state.colored}, () => resolve())\r\n                })\r\n                .catch(error => {\r\n                    reject(error)\r\n                    console.log(error)\r\n                 })\r\n        })\r\n    }\r\n\r\n//loads all cities passed by param, names state properly\r\n    getInitialCityDatabase(cityName_param, databaseNameFromDatabase) {\r\n        this.setState({loading: true})\r\n        // let weatherURL = `local_database_${cityName_param}.json`\r\nlet weatherURL = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName_param}&units=metric&APPID=c13044a1ca13fe20adb4a879f7eeed40`\r\n        //setting unique name for each city\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(weatherURL)\r\n                .then(response => {\r\n                    this.setState({[databaseNameFromDatabase]: response.data, indexCities: this.state.indexCities + 1, colored: !this.state.colored}, () => resolve())\r\n                })\r\n                .catch(error => {\r\n                    reject(error)\r\n                    console.log(error)\r\n                 })\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    convertDataToDay = (timestamp) => {\r\n        let a = new Date(timestamp*1000);\r\n        let days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n        let dayOfWeek = days[a.getDay()]\r\n        return dayOfWeek\r\n    }\r\n\r\n\r\n//gets data from clicked element\r\n    getActualClickedDataHandler = (clickedData, singleCityName, clickedDatabaseName) => {\r\n        this.setState({clickedCityData: clickedData, clickedCityName: singleCityName.toLowerCase(), clickedDatabaseName: clickedDatabaseName})\r\n        \r\n\r\n        this.showBackdrop()\r\n    }\r\n\r\n    hideBackdrop = () => {\r\n        this.setState({backdrop: false})\r\n    }\r\n    \r\n    showBackdrop = () => {\r\n        this.setState({backdrop: true})\r\n    }\r\n    \r\n    changeInputState = (e) => {\r\n            this.setState({tempCityName: e.target.value})\r\n        }\r\n    \r\n    acceptInputState = () => {\r\n        //!!!!!!! removing cities, which starts later then clicked startDate --> add removing unnecessary databases from state!!!!!!!!!!!!!\r\n        const clearedDatabaseNames = this.state.listOfDatabaseNames.filter((el) => {\r\n                if (el.startDate < this.state.clickedCityData)\r\n                    return el.startDate < this.state.clickedCityData\r\n        })\r\n        this.setState({listOfDatabaseNames: clearedDatabaseNames})\r\n        \r\n                this.setState({cityName: this.state.tempCityName, backdrop: false}, () => this.getSingleCityDatabase(this.state.cityName)\r\n                              .then(() => {\r\n                                    this.saveStateToLocalstorage()\r\n                                    this.setState({loading:false})}))\r\n                                \r\n    }\r\n\r\n    \r\n    resetLocalstorage = () => {\r\n        localStorage.clear('StateInsideStorage')\r\n    }\r\n    \r\n    closeTutorialHandler = () => {\r\n        this.setState({watchedTutorial: true})\r\n    }\r\n        \r\n        render () {\r\n            \r\n            let inputContent = <div className={styles['inputContent']}>\r\n                                    <label>CITY NAME: </label>\r\n                                    <input name=\"cityNameInput\" type=\"text\" onChange={this.changeInputState}/>\r\n                                    <button className={styles['confirmCityButton']} onClick={this.acceptInputState}>ADD CITY 🌍 </button>\r\n                                </div>\r\n\r\n            if (this.state.loading) return <Spinner/>\r\n\r\n            \r\n            \r\n            \r\n// experimental, scheduled for refactoring\r\n//proceed futher if there all initial databases are loaded\r\n            let tempDB = this.state.listOfDatabaseNames.map(el =>     \r\n                {return el.databaseName})\r\n            //console.log(tempDB)\r\n            let tempDB2 = tempDB.map(el => \r\n                        {if (this.state[el]) return el})\r\n            //console.log(tempDB2)\r\n            let tempDB3 = tempDB2.every(el => \r\n                        {return el})   \r\n            //console.log(tempDB3)\r\n            if (!tempDB3) return <Spinner/>\r\n\r\n            const tutorial = <Tutorial\r\n                                closeTutorial={this.closeTutorialHandler}/>\r\n\r\n    \r\n            let commonDatabase = this.state.listOfDatabaseNames.map(singleCityElement => {\r\n                    let singleCityDatabase = (this.state[singleCityElement.databaseName])\r\n//below filtered by starting & ending date defined before\r\n                    const singleCityDatabaseFiltered = singleCityDatabase.list.filter((el) => {\r\n                        return el.dt >= singleCityElement.startDate && el.dt < singleCityElement.endDate\r\n                    })                \r\n                    return(\r\n                        singleCityDatabaseFiltered.map((singleObject, mapIndex) => {\r\n                                            return (\r\n                                                <SingleCityForecast\r\n                                                      key={singleObject.dt+singleCityDatabase.city.name}\r\n                                                      databaseName={singleCityElement.databaseName}\r\n                                                      dt={singleObject.dt}\r\n                                                      dt_txt={singleObject.dt_txt}\r\n                                                      dayOfWeek={this.convertDataToDay(singleObject.dt)}\r\n                                                      temperature={singleObject.main.temp}\r\n                                                      temperature_max={singleObject.main.temp_max}\r\n                                                      temperature_min={singleObject.main.temp_min}\r\n                                                      conditionID={singleObject.weather[0].id}\r\n                                                      singleCityName={singleCityDatabase.city.name}\r\n                                                      singleCityCountry={singleCityDatabase.city.country}\r\n                                                      getActualClickedDataHandler={this.getActualClickedDataHandler}\r\n                                                      color={!singleCityElement.colored}\r\n                                                      >\r\n                                                </SingleCityForecast>\r\n                                            )\r\n                                        })\r\n                        )\r\n                })\r\n\r\n            \r\n            \r\n            return (\r\n                 <div className={styles['CumulativeForecast']}>\r\n                    <Backdrop \r\n                        show={this.state.backdrop}\r\n                        click={this.hideBackdrop}\r\n                        changeInputState={this.changeInputState}>\r\n                        {inputContent}\r\n                    </Backdrop>\r\n                    {this.state.watchedTutorial\r\n                        ? commonDatabase \r\n                        : tutorial}\r\n                    {localStorage.getItem('StateInsideStorage')\r\n                        ? <button className={styles['clearButton']} onClick={this.resetLocalstorage}> ⚠️ CLEAR LOCALSTORAGE</button>\r\n                        : null}\r\n                </div>    \r\n            )\r\n        }\r\n    }\r\n\r\nexport default cumulativeForecast","import React from 'react';\r\nimport styles from './MainContainer.module.css';\r\nimport CumulativeForecast from '../../components/CumulativeForecast/CumulativeForecast'\r\n\r\n\r\n\r\n const mainContainer = () => {\r\n    \r\n    \r\n    return (\r\n      <div className={styles['MainContainer']}>\r\n          <CumulativeForecast/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\nexport default mainContainer","import React from 'react'\r\nimport styles from './HeaderInfo.module.css'\r\n\r\n\r\nconst headerInfo = (props) => {\r\n\r\n    \r\n    return (\r\n    \r\n    <div className={styles['HeaderInfo']}>\r\n       <div style={{fontSize: '1.3em'}}> ⛅ TRAVEL WEATHER <span style={{fontSize: '.3em'}}>alpha ☕</span> </div>\r\n       <div style={{fontSize: '.5em'}}> \r\n        Don't Let the Weather Take You by Surprise! 💼 \r\n       </div>\r\n    </div>\r\n    \r\n    \r\n    )\r\n    \r\n    \r\n    \r\n    \r\n}\r\n\r\n\r\nexport default headerInfo","import React, { Component } from 'react';\nimport styles from './App.module.css';\nimport MainContainer from './containers/MainContainer/MainContainer'\nimport HeaderInfo from './components/HeaderInfo/HeaderInfo'\n\nclass App extends Component {\n\n    \n    state = {        \n    }\n\n    \n    render(props) {\n        return (\n          <div className={styles['App']}>\n            <HeaderInfo/>\n            <MainContainer/>\n          </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}